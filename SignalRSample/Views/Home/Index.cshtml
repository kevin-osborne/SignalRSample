@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1>SignalR Sample Logging UI</h1>

<hr />

<style>
    table {
        table-layout: fixed;
    }

        table th, table td {
            overflow: hidden;
        }
</style>

<div id="logs">
    <table id="logTable" class="table">
        <thead>
            <tr>
                <th style="width: 20%">Time</th>
                <th style="width: 5%">Level</th>
                <th>Message</th>
            </tr>
        </thead>
        <tbody></tbody>
    </table>
</div>
<script src="/lib/jquery.js" type="text/javascript"></script>
<script type="text/javascript">

    var transportType;
    var logger;
    var loggingHub;
    var loggingConnection;

    function prependLogRow(logEvent) {
        var d = new Date(logEvent.timeStamp); //.ToString("dd/MM H:mm:ss");
        var m = logEvent.message;
        m = m.replace(/.*\[/, "[");
        var s = "<tr><td>" + d + "</td><td>" + logEvent.level + "</td><td>" + m + "</td></tr>";
        $("#logTable tbody").prepend(s);

        var rowCount = $('#logTable tr').length;
        if (rowCount > 500) {
            $("#logTable").find("tr:gt(250)").remove();
        }
    };

    function createLogEvent(message) {
        var logEvent = {};
        logEvent.timeStamp = new Date();
        logEvent.level = 'Info';
        logEvent.message = message;
        return logEvent;
    };


    function bindEvents(logger) {

        console.log(logger);

        logger.connection.onclose = (e) => {
            console.log('loggingHub onclose');
            var logEvent = createLogEvent('Logger disconnected. Retrying...');
            prependLogRow(logEvent);
            setTimeout(function () {
                console.log('loggingConnection: ' + loggingConnection);
                transportType = signalR.TransportType.LongPolling; //;WebSockets
                logger = new signalR.ConsoleLogger(signalR.LogLevel.Trace);
                loggingHub = new signalR.HttpConnection(`http://${document.location.host}/signalr`, { transport: transportType, logger: logger });
                loggingConnection = new signalR.HubConnection(loggingHub, logger);
                bindEvents(loggingConnection);
                var logEvent = createLogEvent('Logger reconnected.');
                prependLogRow(logEvent);
            }, 1000); // Restart connection after a second.
        };

        logger.on('Log', (logEvent) => {
            prependLogRow(logEvent);
        });

        logger.start().catch(err => {
            console.log('connection error');
        });
    };

    $(document).ready(function () {

        transportType = signalR.TransportType.LongPolling; //;WebSockets
        logger = new signalR.ConsoleLogger(signalR.LogLevel.Trace);
        loggingHub = new signalR.HttpConnection(`http://${document.location.host}/signalr`, { transport: transportType, logger: logger });
        loggingConnection = new signalR.HubConnection(loggingHub, logger);

        bindEvents(loggingConnection);

        var logEvent = createLogEvent('Logger loaded. Please wait...');
        prependLogRow(logEvent);
    })
</script>
